## For async application
## You can connect to 2020 port with /send end point
version: "2.4"
services:
  # this reads async messages from kafka consumer
  async-kafka-consumer:
    image: traceableronak/async-kafka-consumer:latest
    container_name: async-kafka-consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # test by running locally hypertrace
      - TRACE_EXPORTER_END_POINT=http://host.docker.internal:9411/api/v2/spans
    networks:
      - hypertrace_example
    depends_on:
      kafka-zookeeper-service:
        condition: service_healthy

  # this produces async messages to kafka on GET :2020/send request call
  async-kafka-producer-httpservice:
    image: traceableronak/async-kafka-producer-httpservice:latest
    container_name: async-kafka-producer-httpservice
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # test by running locally hypertrace
      - TRACE_EXPORTER_END_POINT=http://host.docker.internal:9411/api/v2/spans
      - PORT=2022
    ports:
      - 2022:2022
    networks:
      - hypertrace_example
    depends_on:
      kafka-zookeeper-service:
        condition: service_healthy


  # Kafka is used in this async demo app
  kafka-zookeeper-service:
    image: hypertrace/kafka-zookeeper:main
    container_name: kafka-zookeeper-service
    networks:
      hypertrace_example:
        # prevents apps from having to use the hostname kafka-zookeeper
        aliases:
          - kafka
          - zookeeper

networks:
  hypertrace_example: